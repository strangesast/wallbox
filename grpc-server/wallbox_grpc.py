# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: wallbox.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.api_pb2
import wallbox_pb2


class WallboxBase(abc.ABC):

    @abc.abstractmethod
    async def GetStatus(self, stream: 'grpclib.server.Stream[wallbox_pb2.Empty, wallbox_pb2.Status]') -> None:
        pass

    @abc.abstractmethod
    async def GetPlaylistInfo(self, stream: 'grpclib.server.Stream[wallbox_pb2.PositionRange, wallbox_pb2.PlaylistInfoResult]') -> None:
        pass

    @abc.abstractmethod
    async def GetListFiles(self, stream: 'grpclib.server.Stream[wallbox_pb2.Uri, wallbox_pb2.FileListResult]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/Wallbox/GetStatus': grpclib.const.Handler(
                self.GetStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                wallbox_pb2.Empty,
                wallbox_pb2.Status,
            ),
            '/Wallbox/GetPlaylistInfo': grpclib.const.Handler(
                self.GetPlaylistInfo,
                grpclib.const.Cardinality.UNARY_UNARY,
                wallbox_pb2.PositionRange,
                wallbox_pb2.PlaylistInfoResult,
            ),
            '/Wallbox/GetListFiles': grpclib.const.Handler(
                self.GetListFiles,
                grpclib.const.Cardinality.UNARY_UNARY,
                wallbox_pb2.Uri,
                wallbox_pb2.FileListResult,
            ),
        }


class WallboxStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/Wallbox/GetStatus',
            wallbox_pb2.Empty,
            wallbox_pb2.Status,
        )
        self.GetPlaylistInfo = grpclib.client.UnaryUnaryMethod(
            channel,
            '/Wallbox/GetPlaylistInfo',
            wallbox_pb2.PositionRange,
            wallbox_pb2.PlaylistInfoResult,
        )
        self.GetListFiles = grpclib.client.UnaryUnaryMethod(
            channel,
            '/Wallbox/GetListFiles',
            wallbox_pb2.Uri,
            wallbox_pb2.FileListResult,
        )


class ServerReflectionBase(abc.ABC):

    @abc.abstractmethod
    async def ListApis(self, stream: 'grpclib.server.Stream[wallbox_pb2.ListApisRequest, wallbox_pb2.ListApisResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetMethod(self, stream: 'grpclib.server.Stream[wallbox_pb2.GetMethodRequest, wallbox_pb2.GetMethodResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/ServerReflection/ListApis': grpclib.const.Handler(
                self.ListApis,
                grpclib.const.Cardinality.UNARY_UNARY,
                wallbox_pb2.ListApisRequest,
                wallbox_pb2.ListApisResponse,
            ),
            '/ServerReflection/GetMethod': grpclib.const.Handler(
                self.GetMethod,
                grpclib.const.Cardinality.UNARY_UNARY,
                wallbox_pb2.GetMethodRequest,
                wallbox_pb2.GetMethodResponse,
            ),
        }


class ServerReflectionStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.ListApis = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ServerReflection/ListApis',
            wallbox_pb2.ListApisRequest,
            wallbox_pb2.ListApisResponse,
        )
        self.GetMethod = grpclib.client.UnaryUnaryMethod(
            channel,
            '/ServerReflection/GetMethod',
            wallbox_pb2.GetMethodRequest,
            wallbox_pb2.GetMethodResponse,
        )
